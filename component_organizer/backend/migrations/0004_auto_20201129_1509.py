# Generated by Django 3.1.3 on 2020-11-29 15:09

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('backend', '0003_inductor_variableinductor'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='capacitor',
            name='max_capacitance',
        ),
        migrations.RemoveField(
            model_name='capacitor',
            name='min_capacitance',
        ),
        migrations.AlterField(
            model_name='capacitor',
            name='capacitor_type',
            field=models.CharField(choices=[('Ceramic capacitor', 'ceramic'), ('Electrolytic capacitor', 'electrolytic'), ('Air capacitor', 'air'), ('Film capacitor', 'film'), ('Mica capacitor', 'mica'), ('Polymer capacitor', 'polymer'), ('Supercapacitor', 'super'), ('Tantalum capacitor', 'tantalum')], default='ceramic', max_length=255),
        ),
        migrations.CreateModel(
            name='TrimmerCapacitor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('schematic_symbol_path', models.CharField(blank=True, default='', max_length=1024)),
                ('datasheet_path', models.CharField(blank=True, default='', max_length=1024)),
                ('mounting', models.CharField(choices=[('THT', 'THT'), ('SMD', 'SMD'), ('Other', 'Other')], default='THT', max_length=255)),
                ('polarized', models.BooleanField(default=False)),
                ('max_voltage', models.FloatField(blank=True, default=0)),
                ('max_temperature', models.FloatField(blank=True, default=0)),
                ('tolerance', models.FloatField(blank=True, default=0)),
                ('min_capacitance', models.FloatField(blank=True, default=0)),
                ('max_capacitance', models.FloatField(blank=True, default=0)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.category')),
                ('custom_values', models.ManyToManyField(blank=True, to='backend.KeyValuePair')),
                ('locations', models.ManyToManyField(blank=True, to='backend.ItemLocationModel')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
